#include <iostream>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iomanip>
using namespace std;

char *nameOfProgram;
const string varPattern = "/x/";

enum{
	NAME, OPTION, FROM, TO, STR, TOTAL
};

enum OPT{
	DASH = '-', Z = 'z', A = 'a', C='c'
};

void printHelp(){
	const int W = 10, SIZE = 7;

	string help[SIZE][2]={{"DESCRIPTIONS:",""},
			{"Takes two integers 'from' and 'to' and print the value between the range of the two integers. User may select different options, which are, of course, optional.", ""},
			{"",""},
			{"OPTIONS:", ""},
			{"-z", "enumerate integers"},
			{"-a", "enumerate ASCII"},
			{"-c", "count the number of lines generated by the program and print before the result"}};

	for (int i = 0; i < SIZE; i++){
		cout << setw(W) << left << help[i][0] << help[i][1] << endl;
	}
}

inline void usage(){
	cerr << "Enter " << nameOfProgram << " --help for help"<<endl;
	cerr << "Usage: " << nameOfProgram << " [-[z|a|-help][c]] from to [str]"<<endl;
	exit(1);
}

int optType(OPT tar){
	if (tar == A || tar == Z) return 1;
	else if (tar == C) return 2;
	else return 0;
}

bool checkOptions(char *opt){
	int len = strlen(opt);
	bool type[]= {0,0,0};
	if (*opt != DASH) return 0;
	for (int i = 1, curType; i < len; i++){
		curType = optType((OPT)opt[i]);
		if (!curType || type[curType]) return 0;
		type[curType]++;
		for (int j = 1; j < i; j++){
			if (opt[i] == opt[j]) return 0;
		}
	}
	return 1;
}

int main(int c, char **a){
	const char *HELP = "--help";
	int from = FROM, to = TO, str = STR, option = Z, option2 = 0;
	bool hasPattern = 0;
	nameOfProgram = a[NAME];
	if (c == OPTION + 1 && !strcmp(a[OPTION],HELP)){
                printHelp();
                exit(0);
        } 

	if (c >= 3 && c <= TOTAL){
		if (a[OPTION][0] == DASH){
			if (!checkOptions(a[OPTION])) usage();
			for (int i = 1; i < strlen(a[OPTION]); i++){
				switch(a[OPTION][i]){
					case A: option=A; break;
					case Z: option=Z; break;
					case C: option2=C; break;
				}
			}
			if (c == TOTAL){ 
				hasPattern = 1;	
			}
		} else {
			from -= 1;
			to -= 1;
			if (c != 3){
				str -= 1;
				hasPattern = 1;
			}
		}
	} else {
		ERROR:
		usage();
	} 
	
	int v1 = strlen(a[from]) == 1 && (a[from][0] < '0' || a[from][0] > '9')? 
		a[from][0] : atoi(a[from]);
	int v2 = strlen(a[to]) == 1 && (a[to][0] < '0' || a[to][0] > '9')?
		a[to][0] : atoi(a[to]);
	int max = v1 > v2? v1 :v2, min = v1 > v2? v2 : v1;

	string pattern = "";
	if (hasPattern){
		char *line = a[str];
		int len = strlen(line);
		for (int i = 0, s=0; i < len;i++){
			if (i + 2 <= len && line[i] == '/' && line[i+1] == 'x' && line[i+2] == '/'){
				pattern += (char) 1;
				i += 2;
			} else {
				pattern += line[i];
			}
		}
	}

	int patternLen = pattern.length();
	if (option2 == C) cout << (max-min+1) << endl;
	if (option == A) goto ascii;
	
	// default
	for (int i = min; i <= max; i++){
		if (patternLen){
			for (int j = 0; j < patternLen; j++){
				if (pattern[j] == 1){
					cout << i;
				} else {
					cout << pattern[j];
				}
			}
			cout << endl;
		} else {
			cout << i << endl;
		}
	}
	goto end;
	// print ASCII
	ascii: for (int i = min; i <= max; i++){
		if (patternLen){
			for (int j = 0; j < patternLen; j++){
					cout << (pattern[j] == (char)1 ? (char) i : (char) pattern[j]);
			}
			cout << endl;
		}else{
			cout << (char) i << endl;
        	}
	}

	end:;
}
